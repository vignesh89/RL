<% # Switch to Perl scripting mode to get the config settings in ./config/config.cfg
#!/usr/bin/perl -w
###################################################################################################
use lib "scripts";
use Configuration;
my $config=new Configuration(".");   
my $logDir=$config->get('LOG_DIR')->[0]; 
my $inputDir=$config->get('INPUT_DIR')->[0]; 
my $databaseType=$config->get('DATABASETYPE')->[0]; 
$databaseType = uc $databaseType;
%>
   
/* Copyright (C) 2013-2015, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */
 
/**
The **DBLoader** is an SPL application for InfoSphere Streams 
It uses the DB2 load command tool or the Oracle SQL Loader to load files directly into a database. 

**DBLoader** scans the input directory and loads the files parallel into the database.  

It improves the insert-performance of DB2, Informix, Netezza and Oracle databases actions.

It is not needed to change the SPL code in case of new tables.

Prerequisite:

All input files must have a correctly formated Comma Separated Value (csv) format.
The input file names must include the database schema and the table name.  
The database schema begins after the path and end with a dot ".".
The table name begins after "." and end with a dash "-".             

for example:  /data/in/DB2INST1.MY_TABLE_123-2014.03.31.csv 

In this case **DB2INST1** is the database user name (or schema) 
and **MY_TABLE_123** is the table name. 

DBLoader uses the LinuxSource operator to execute a command.
The LinuxSource operator is a part of **com.ibm.streamsx.linuxshell** toolkit.

linuxshell toolkit is available in GitHub: [https://github.com/ejpring/LinuxShellToolkit]
 
*/

namespace com.ibm.streamsx.db.dbloader ;

 

/**
 * The composite **Main** reads configuration parameters from the config.cfg file.
 * 
 * Depending on the value of the database type in the configuration file config.cfg, 
 * it starts the DB2FileLoder, the OrcaleFileLoader or the NetezzaLoader
 */
composite Main
{	
	graph
 
	/** 
	 * ReadConfig
	 * Opens config.cfg file and delivers the lines of configuration parameters.
	 */	 
	stream <rstring configLine> ReadConfig = FileSource()
	{
		param
			file  		: "../config/config.cfg" ;
			initDelay 	: 3.0 ;
			
		/**  
		 * All operators with the same partitionColocation value "MainPE" 
		 * will be run in the same partition.
		*/  
		config
			placement : partitionColocation("MainPE") ; 
	}	
		   
	/** 
	 * ConfigParamaters
	 * Checks the configuration parameters via getSubmissionTimeValue.
	 * If no parameter was given it reads the value of configuration 
	 * parameters from configuration file 
	 */	 
	stream <ConfigData configData> ConfigParameters = Custom(ReadConfig)
	{
		logic
		state :
		{
			mutable ConfigData cfgData = {
					dbName			= getSubmissionTimeValue("dbName", " ") ,
					dbUser			= getSubmissionTimeValue("dbUser", " ") ,
					dbPass			= getSubmissionTimeValue("dbPass", " ") , 
					dbHost			= getSubmissionTimeValue("dbHost", " ") , 
					inputDir		= "<%=$inputDir%>",	
					logDir			= "<%=$logDir%>",
				 	archiveDir 		= getSubmissionTimeValue("archiveDir", " ") , 
				 	errorDir 		= getSubmissionTimeValue("errorDir", " ") , 
				 	controlDir 	= getSubmissionTimeValue("controlDir", " "), 
				 	databaseType 	= "" ,
				 	fileName 		= "",
				 	counter 		= 0l };


			mutable rstring configParam = "";
			mutable rstring configValue = "";
			mutable rstring value;
			mutable int32 foundPosition = 0;
		}
		onTuple ReadConfig:
		{
			/**
			 * If no parameter was given via submit job
			 */
			if(length(cfgData.dbName) < 2)
			{
				cfgData.dbName = getConfigValue(configLine, "DBNAME");
			}

			if(length(cfgData.dbUser) < 2)
			{
				cfgData.dbUser = getConfigValue(configLine, "DBUSER");
			}

			if(length(cfgData.dbPass) < 2)
			{
				cfgData.dbPass = getConfigValue(configLine, "DBPWD");
			}

			if(length(cfgData.dbHost) < 2)
			{
				cfgData.dbHost = getConfigValue(configLine, "DBHOST");
			}


			if(length(cfgData.archiveDir) < 2)
			{
				cfgData.archiveDir = getConfigValue(configLine, "ARCHIVE_DIR");
			}

			if(length(cfgData.errorDir) < 2)
			{
				cfgData.errorDir = getConfigValue(configLine, "ERROR_DIR");
			}

			if(length(cfgData.controlDir) < 2)
			{
				cfgData.controlDir = getConfigValue(configLine, "CONTROLFILES_DIR");
			}
									 				
		}
		 
		onPunct ReadConfig:
		{

			if (currentPunct() == Sys.FinalMarker)
			{
				submit({ configData = cfgData }, ConfigParameters) ;
			}
		}
		
		/**  
	 	* All operators with the same partitionColocation value "MainPE" 
	 	* will be run in the same partition.
		*/  
		config
			placement : partitionColocation("MainPE") ; 
		
	} 
	    
	/**
	 * CreateStartLog
	 * Create start log information
	*/
	stream <rstring result> CreateStartLog = Custom(ConfigParameters)
	{	 
		logic 
		state :
		{
			mutable rstring result = "";
			mutable rstring databaseType = "<%=$databaseType%>";
		}
		onTuple ConfigParameters :
		{
			// println(ConfigParameters);	
			result ="Configuration parameters: \n" 
			+ "                    dbName       = " + configData.dbName + "\n"	
			+ "                    dbUser       = " + configData.dbUser + "\n"	
			+ "                    databaseType = <%=$databaseType%>\n"	
			+ "                    logDir       = <%=$logDir%>\n"	
			+ "                    inputDir     = <%=$inputDir%>\n"	
			+ "                    archiveDir   = " + configData.archiveDir + "\n"
			+ "                    errorDir     = " + configData.errorDir + "\n"	
			+ "                    controlDir = " + configData.controlDir + "\n\n";	
			// check $databaseType
			if ((findFirst(databaseType, "DB2", 0) == - 1) 
				&& (findFirst(databaseType, "ORACLE", 0) == - 1)
				&& (findFirst(databaseType, "NETEZZA", 0) == - 1)
				&& (findFirst(databaseType, "INFORMIX", 0) == - 1))
			{				
				result = result + getCurrentTime() + " The value of DATABASETYPE in config.cfg file is " +  "<%=$databaseType%>.\n"
				+ "                    Change the value of DATABASETYPE to DB2 or Oracle or NETEZZA or Informix.\n"
				+ "                    Rebuild DBLoader project and try it again.\n";
			}
			// printStringLn(result);
			submit({ result =  result}, CreateStartLog) ;
	
		} 

		/**  
	 	* All operators with the same partitionColocation value "MainPE" 
	 	* will be run in the same partition.
		*/  
		config
			placement : partitionColocation("MainPE") ; 
		
	} 


	/** 
	 * Loader
	 * Starts parallel loaders to load files into database.
	 */ 
    (stream <rstring result> Loader; stream<rstring result> Log) = DBLoader(ConfigParameters)
	{
	} 



	/**
	 * LogResult
	 * Writes the result in log file. 
	*/
	() as LogResult = Logger(CreateStartLog, Log)
	{
		config
       		placement : partitionColocation("DbLogger") ;
		
	}
					
} /** End of Main composite*/ 

/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                                   */


namespace com.ibm.streamsx.hdfs2.helpers.blog;

/**
 * Convert a tuple to a string and then write to HDFS.
 * The operator converts input tuples on its input stream
 * to strings, and then sends them to the HDFS2FileSink.
 * It includes a default conversion using SPL's tuple
 * format, but allows you to supply a operator
 * to do the conversion from tuple to rstring.
 * 
 * To use this, you must supply an operator.  For the JSONToTuple
 * case, we expected this:
 * 
 *     () as sink = HDFSFormatWrite_V2(inStream) {
 *         param
 *         formatter:JSONToTuple;
 * 	    file: "myfile.json";
 *     }
 * 
 * But we'd also have supply an operator for the txt case,
 * which means that V2 isn't as flexible an V1.  So, V3.
 * 
 *     () as sink = HDFSFormatWrite_V2(inStream) {
 *         param
 *         formatter: toText;
 *         file: "myfile.txt";
 *     }
 * 
 *  
 * @input inStream Stream to be written to HDFS
 * @param file File name to be passed on to HDFSFileSink
 */
public composite HDFSFormatWrite_V2(input inStream )
{
	param
	// The operator that takes a tuple as input and produces
	// a string. This must be an operator with no parameters.
		operator $formatter;
		
		// The file to be written.  This is required by the 
		// composite.  
		expression<rstring> $file ;

	graph
	// This applies the formatter to the input stream to produce
	// a stream of strings.
		stream<rstring astring> stringStream = $formatter(inStream)
		{
		}

		// Now those strings are written to the sink operator. 
		// The file, hdfsUser, and timeformat parameters are passed through.
		() as Sink = com.ibm.streams.bigdata.hdfs2::HDFS2FileSink (stringStream)
		{
			param
				file : $file ;
		}

}
/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                                   */


/**
 * This namespace hosts intermediate versions of HDFSWriteFormat as it's
 * built up to the final form.  The blog post refers to these versions.
 * * **HDFSFormatWrite_V1** encapsulate the scan-read-write example,
 * hard-coding the formatter to be the txt format.
 * * **HDFSFormatWrite_V2** Let the formatting operator be an argument.
 * * **HDFSFormatWrite_V3** The above, but now the formatting operator has a
 * default, so that we can use it just as we used V1.
 */
 
namespace com.ibm.streamsx.hdfs2.helpers.blog;

/**
 * Convert a tuple to a string and then write to HDFS.
 * The operator converts input tuples on its input stream
 * to strings, and then sends them to the HDFS2FileSink.
 * @input inStream Stream to be written to HDFS
 * @param file File name to be passed on to HDFSFileSink
 */
public composite HDFSFormatWrite_V1(input inStream )
{
	param
		// The file to be written.  This is required by the 
		// composite.  
		expression<rstring> $file ;

	graph
	// This applies the formatter to the input stream to produce
	// a stream of strings.
		stream<rstring astring> stringStream = Functor(inStream)
		{
		output stringStream:
		astring = (rstring)inStream;
		}

		// Now those strings are written to the sink operator. 
		// The file, hdfsUser, and timeformat parameters are passed through.
		() as Sink = com.ibm.streams.bigdata.hdfs2::HDFS2FileSink(stringStream)
		{
			param
				file : $file ;
		}

}

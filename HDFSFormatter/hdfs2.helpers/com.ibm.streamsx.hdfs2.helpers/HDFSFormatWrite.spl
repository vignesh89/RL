/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                                   */


/**
 * This file contains HDFSWriteFormat, which converts a tuple
 * to a string as specified by the formatter, and then sends it to
 * HDFS2FileSink.
 */
 
namespace com.ibm.streamsx.hdfs2.helpers;

/**
 * Convert a tuple to a string and then write to HDFS.
 * The operator converts input tuples on its input stream
 * to strings, and then sends them to the HDFS2FileSink.
 * It includes a default conversion using SPL's tuple
 * format, but allows you to supply a operator
 * to do the conversion from tuple to rstring.
 *  
 * @input inStream Stream to be written to HDFS
 * @param formatter (optional) operator to be used for converting from tuple to string
 * @param writer (optional) operator to be used to write to HDFS
 * @param file File name to be passed on to HDFSFileSink
 * @param timeFormat passed to the file sink; used when the filename contains %TIME
 */
public composite HDFSFormatWrite(input inStream )
{
	param
	// The operator that takes a tuple as input and produces
	// a string.  It defaults to the toText operator, which
	// uses a cast to rstring.
		operator $formatter : toText ;
		// The operator that actually does the writing to HDFS.
		// It defaults to HDFS2FileSink.  If you need to use
		// an option not available in the composite (such as
		// hdfsURI, bytesPerFile, closeOnPunct, or tuplesPerFile)
		// You'll need to supply your own composite.  The 
		// ScanReadWrite sample shows an how to do this.
		operator $writer : com.ibm.streams.bigdata.hdfs2::HDFS2FileSink ;

		// The file to be written.  This is required by the 
		// composite.  
		expression<rstring> $file ;

		// If a user is supplied, the operator uses that value.
		// If no user is supplied, it pulls the user from the 
		// environment variable.  
		expression<rstring> $hdfsUser : getEnvironmentVariable("USER", "") ;

		// If not timeFormat is supplied, the operator uses this
		// value, otherwise it defautls to the same operator default.
		expression<rstring> $timeFormat : "yyyyMMdd_HHmmss" ;
	graph
	// This applies the formatter to the input stream to produce
	// a stream of strings.
		stream<rstring astring> stringStream = $formatter(inStream)
		{
		}

		// Now those strings are written to the sink operator. 
		// The file, hdfsUser, and timeformat parameters are passed through.
		() as Sink = $writer(stringStream)
		{
			param
				file : $file ;
				hdfsUser : $hdfsUser ;
				timeFormat : $timeFormat ;
		}

}
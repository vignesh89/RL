namespace application ;

use com.ibm.streams.timeseries.modeling::AutoForecaster2 ;

composite AutoForecasterSamples
{
	graph
		(stream<float64 inputData> FileSource_1_out0) as FileSource_1 = FileSource()
		{
			param
				file : "netload.out" ;
		}

		(stream<uint64 forecastedTimestamp, float64 forecastedResult>
			AutoForecaster2_2_out0) as AutoForecaster2_2 = AutoForecaster2(Custom_4_out0
			as inPort0Alias)
		{
			param
				inputTimeSeries : inputData ;
				initSamples : 100u ;
				stepAhead : 20u ;
				algorithm : Dynamic ;
				inputTimestamp : t ;
			output
				AutoForecaster2_2_out0 : forecastedResult = forecastedTimeSeriesStep(),
					forecastedTimestamp = forecastedTimestamp() ;
		}

		() as FileSink_3 = FileSink(AutoForecaster2_2_out0)
		{
			param
				file : "result.txt" ;
		}

		(stream<uint64 t, float64 inputData> Custom_4_out0) as Custom_4 =
			Custom(FileSource_1_out0)
		{
			logic
				state :
				{
					mutable uint64 cnt = 1l ;
				}

				onTuple FileSource_1_out0 :
				{
					submit({ t = cnt ++, inputData = inputData }, Custom_4_out0) ;
				}

		}

}


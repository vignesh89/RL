module findnormalize;

create external table AliasTable (alias Text, normalizedName Text) allow_empty false;

create dictionary AliasDict from table AliasTable with entries from alias and case insensitive;

create dictionary NormalizedDict from table AliasTable with entries from normalizedName and case insensitive;

-- Two paths--looking at normalized names, one looking at the aliases.  
create view FoundNamesRaw as 
extract dictionaries 
	 AliasDict on D.text as foundName
from Document D;

-- Map the names to their normalized values.  
create view FoundNames_alias as
select F.foundName as foundName,
GetString(N.normalizedName) as normalizedName
from FoundNamesRaw F,AliasTable N
where Equals(GetString(ToLowerCase(F.foundName)),GetString(ToLowerCase(N.alias)));

-- Find the normalized names.  
create view FoundNamesRaw_normal as 
       extract	dictionary NormalizedDict on D.text as foundName
from Document D;

-- combine the two paths.
create view FoundNames as 
(select F.foundName as foundName,
       GetString(F.foundName) as normalizedName
       from FoundNamesRaw_normal F)
union all
(select F.* from FoundNames_alias F);


create view FoundNamesConsolidated as 
select F.* 
from FoundNames F
consolidate on F.foundName using 'ContainedWithin';

-- This view's name is lower case because this one we'll use in streams.
create view normalizedNames as
select List(F.foundName) as aliases,
F.normalizedName as normalizedName
from FoundNamesConsolidated F
group by F.normalizedName;

output view normalizedNames;